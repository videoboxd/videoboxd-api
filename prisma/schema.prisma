datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator zod {
  provider = "zod-prisma-types"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id String @id @default(ulid())

  email    String @unique
  password String // hashed password, not plain string
  fullName String
  username String @unique

  avatarUrl String? // https://api.dicebear.com/9.x/open-peeps/svg?seed=SiapaNamanya

  videos    Video[]
  reviews   Review[]
  comments  ReviewComment[]
  playlists Playlist[]
  likes     Like[]

  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id String @id @default(ulid())

  // slug String @unique // youtube-title-of-the-video-1234567890

  platformVideoId String    @unique
  originalUrl     String // https://youtube.com/watch?v=VIDEO_ID
  // https://youtube.com/embed/VIDEO_ID
  // https://facebook.com/video.php?v=VIDEO_ID
  // https://instagram.com/p/VIDEO_ID
  title           String
  description     String?
  creator         String? // TODO: Channel
  thumbnailUrl    String?
  uploadedAt      DateTime?

  platformId String
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  reviews    Review[]
  categories Category[]
  playlists  Playlist[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Platform {
  id   String @id @default(ulid())
  slug String @unique // youtube, facebook, instagram, twitch, vimeo, netflix, disneyplus
  name String @unique // YouTube, Facebook, Instagram, Twitch, Vimeo, Netflix, Disney+

  videos Video[]
}

model Category {
  id   String @id @default(ulid())
  slug String @unique
  name String @unique

  videos Video[]
}

model Review {
  id String @id @default(ulid())

  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  rating Int // 1-5
  text   String

  likes    Like[]
  comments ReviewComment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewComment {
  id String @id @default(ulid())

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id String @id @default(ulid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title  String
  videos Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(ulid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Follow {
  id String @id @default(ulid())

  followerId String
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
}
